// <auto-generated />
using System;
using ConcreteIOT.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConcreteIOT.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250929230134_AddedRelations")]
    partial class AddedRelations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConcreteIOT.Application.Models.ConcreteMix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("MixA")
                        .HasColumnType("double precision");

                    b.Property<double>("MixB")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ConcreteMixes");
                });

            modelBuilder.Entity("ConcreteIOT.Application.Models.DataSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("DeltaTime")
                        .HasColumnType("double precision");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ElementId")
                        .HasColumnType("uuid");

                    b.Property<double>("TempCore")
                        .HasColumnType("double precision");

                    b.Property<double>("TempSurf")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("ElementId");

                    b.ToTable("DataSets");
                });

            modelBuilder.Entity("ConcreteIOT.Application.Models.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("ConcreteIOT.Application.Models.Element", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConcreteMixId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ConcreteMixId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Elements");
                });

            modelBuilder.Entity("ConcreteIOT.Application.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Company")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ConcreteIOT.Application.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasDefaultValue("CLIENT");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ConcreteIOT.Application.Models.UserProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)")
                        .HasDefaultValue("OWNER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserId", "ProjectId")
                        .IsUnique();

                    b.ToTable("UserProject");
                });

            modelBuilder.Entity("ConcreteIOT.Application.Models.ConcreteMix", b =>
                {
                    b.HasOne("ConcreteIOT.Application.Models.Project", "Project")
                        .WithMany("ConcreteMixes")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ConcreteIOT.Application.Models.DataSet", b =>
                {
                    b.HasOne("ConcreteIOT.Application.Models.Device", "Device")
                        .WithMany("DataSets")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcreteIOT.Application.Models.Element", "Element")
                        .WithMany("DataSets")
                        .HasForeignKey("ElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("Element");
                });

            modelBuilder.Entity("ConcreteIOT.Application.Models.Element", b =>
                {
                    b.HasOne("ConcreteIOT.Application.Models.ConcreteMix", "ConcreteMix")
                        .WithMany("Elements")
                        .HasForeignKey("ConcreteMixId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcreteIOT.Application.Models.Project", "Project")
                        .WithMany("Elements")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConcreteMix");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ConcreteIOT.Application.Models.UserProject", b =>
                {
                    b.HasOne("ConcreteIOT.Application.Models.Project", "Project")
                        .WithMany("UserProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConcreteIOT.Application.Models.User", "User")
                        .WithMany("UserProjects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConcreteIOT.Application.Models.ConcreteMix", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("ConcreteIOT.Application.Models.Device", b =>
                {
                    b.Navigation("DataSets");
                });

            modelBuilder.Entity("ConcreteIOT.Application.Models.Element", b =>
                {
                    b.Navigation("DataSets");
                });

            modelBuilder.Entity("ConcreteIOT.Application.Models.Project", b =>
                {
                    b.Navigation("ConcreteMixes");

                    b.Navigation("Elements");

                    b.Navigation("UserProjects");
                });

            modelBuilder.Entity("ConcreteIOT.Application.Models.User", b =>
                {
                    b.Navigation("UserProjects");
                });
#pragma warning restore 612, 618
        }
    }
}
